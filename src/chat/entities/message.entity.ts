import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  JoinColumn,
  ManyToOne,
  RelationId,
  Index,
  Check,
} from 'typeorm';
import { User } from 'src/users/entities/user.entity';
import { TimestampedEntity } from 'src/common/entities/timestamped.entity';
import { Mission } from '../../missions/entities/mission.entity';

/**
 * Represents a single chat message associated with a mission.
 * Messages can be user-generated or system-generated (e.g., "User X joined the mission").
 */
@Entity('messages')
@Check(
  'CHK_message_user_relation_consistency',
  `"isSystem" = true AND "user_id" IS NULL OR "isSystem" = false AND "user_id" IS NOT NULL`,
)
@Check('CHK_message_min_length', `char_length("message") > 0`)
@Check('CHK_message_max_length', `char_length("message") <= 1000`)
export class Message extends TimestampedEntity {
  @PrimaryGeneratedColumn('uuid', { name: 'id' })
  id: string;

  /**
   * The user who sent the message.
   * Nullable for system-generated messages.
   */
  @ManyToOne(() => User, (user) => user.messages, {
    nullable: true,
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'user_id' })
  user?: User;

  /**
   * ID of the user who sent the message.
   * Matches `user.id` if present.
   */
  @Column({ name: 'user_id', type: 'uuid' })
  @RelationId((message: Message) => message.user)
  @Index()
  userId?: string;

  /**
   * The mission this message belongs to.
   */
  @ManyToOne(() => Mission, (mission) => mission.messages, {
    nullable: false,
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'mission_id' })
  mission: Mission;

  /**
   * ID of the associated mission.
   */
  @Column({ name: 'mission_id', type: 'uuid' })
  @RelationId((message: Message) => message.mission)
  @Index()
  missionId: string;

  /**
   * Message content.
   */
  @Column({ name: 'message', type: 'varchar', length: 1000 })
  message: string;

  /**
   * True if the message was generated by the system (e.g., join/leave notifications).
   */
  @Column({ default: false })
  isSystem: boolean;
}
